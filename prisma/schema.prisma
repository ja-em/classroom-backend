// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model ClassLevel {
  id       Int       @id @default(autoincrement())
  name     String
  students Student[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Student {
  id           Int         @id @default(autoincrement())
  prefix       String
  firstName    String
  lastName     String
  gender       String
  birthDate    DateTime
  classLevelId Int
  classLevel   ClassLevel  @relation(fields: [classLevelId], references: [id])
  enrollment   Enrollment?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Teacher {
  id        Int    @id @default(autoincrement())
  firstName String
  lastName  String
  email     String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Classroom {
  id               Int               @id @default(autoincrement())
  roomNumber       String
  roomName         String
  academicYear     String
  enrollments      Enrollment[]
  homeroomTeachers HomeroomTeacher[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Enrollment {
  id          Int       @id @default(autoincrement())
  classroomId Int
  classroom   Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  studentId   Int       @unique()
  student     Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model HomeroomTeacher {
  id          Int       @id @default(autoincrement())
  classroomId Int
  classroom   Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
